name: Production Deployment

on:
  release:
    types: [published]

jobs:
  deploy:
    name: 'Deploy bundle resources'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: databricks/setup-cli@main

      - name: Deploy bundle resources
        run: databricks bundle deploy
        working-directory: .
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
          DATABRICKS_BUNDLE_ENV: prod

      - name: Debug - List clusters after deploy
        run: databricks clusters list
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
          DATABRICKS_BUNDLE_ENV: prod

  manage_cluster:
    name: 'Start or create cluster'
    runs-on: ubuntu-latest
    
    needs:
      - deploy
    
    steps:
      - uses: actions/checkout@v4
      - uses: databricks/setup-cli@main
      
      - name: Debug - List all clusters
        run: databricks clusters list
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
          DATABRICKS_BUNDLE_ENV: prod
      
      - name: Debug - Show cluster list as JSON
        run: databricks clusters list --output json
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
          DATABRICKS_BUNDLE_ENV: prod
      
      - name: Check if cluster exists and manage it
        run: |
          echo "Checking if cluster exists..."
          
          # Get all clusters and search for our cluster
          CLUSTERS_JSON=$(databricks clusters list --output json)
          echo "All clusters JSON: $CLUSTERS_JSON"
          
          # Try to find our cluster by name
          CLUSTER_ID=$(echo "$CLUSTERS_JSON" | jq -r '.[] | select(.cluster_name == "hello-world-cluster") | .cluster_id // empty')
          echo "Found Cluster ID: '$CLUSTER_ID'"
          
          if [ ! -z "$CLUSTER_ID" ] && [ "$CLUSTER_ID" != "null" ] && [ "$CLUSTER_ID" != "" ]; then
            echo "‚úÖ Cluster exists with ID: $CLUSTER_ID"
            echo "Checking cluster state..."
            CLUSTER_STATE=$(databricks clusters get --cluster-id $CLUSTER_ID --output json | jq -r '.state')
            echo "Cluster state: $CLUSTER_STATE"
            
            if [ "$CLUSTER_STATE" = "TERMINATED" ]; then
              echo "üîÑ Starting existing cluster..."
              databricks clusters start $CLUSTER_ID
            elif [ "$CLUSTER_STATE" = "RUNNING" ]; then
              echo "‚úÖ Cluster is already running"
            else
              echo "‚ö†Ô∏è Cluster is in state: $CLUSTER_STATE"
            fi
          else
            echo "‚ùå Cluster 'hello-world-cluster' not found, creating new cluster..."
            echo "Available clusters:"
            echo "$CLUSTERS_JSON" | jq -r '.[] | "  - \(.cluster_name) (ID: \(.cluster_id), State: \(.state))"'
            
            databricks clusters create --json '{
              "cluster_name": "hello-world-cluster",
              "spark_version": "16.3.x-scala2.12",
              "node_type_id": "m5d.large",
              "num_workers": 1,
              "spark_conf": {
                "spark.databricks.delta.preview.enabled": "true"
              },
              "aws_attributes": {
                "ebs_volume_type": "GENERAL_PURPOSE_SSD",
                "ebs_volume_count": 1,
                "ebs_volume_size": 100,
                "availability": "ON_DEMAND",
                "zone_id": "auto"
              }
            }'
          fi
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
          DATABRICKS_BUNDLE_ENV: prod
      
      - name: Wait and check cluster status
        run: |
          echo "Waiting for cluster to be ready..."
          sleep 90
          echo "Checking final cluster status..."
          databricks clusters list
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
          DATABRICKS_BUNDLE_ENV: prod

  update_app:
    name: 'Start app and deploy app code'
    runs-on: ubuntu-latest

    needs:
      - manage_cluster

    steps:
      - uses: actions/checkout@v4
      - uses: databricks/setup-cli@main

      - name: Start app
        run: databricks bundle run hello-world-app
        working-directory: .
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
          DATABRICKS_BUNDLE_ENV: prod 